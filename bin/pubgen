#!/usr/bin/env ruby

require 'yaml'
require 'fileutils'
require 'optparse'

require 'zipruby'

$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])
require 'pubgen'

# just for one line log
def pubgen_log(log, verbose = true)
  $stdout << log + "\n" if verbose
end

def pubgen_err(err)
  $stderr << '# ' + err + "\n"
end

help = <<EOF
pubgen #{Pubgen::VERSION}, an epub generator. (http://github.com/9beach/pubgen)

Usage:
  pubgen <yaml file> [-o <epub file>] [-v]
  pubgen <yaml file> -m
  pubgen -t <toc file> <epub root path>

EOF

options = {}
opts = OptionParser.new do |opts|
  opts.banner = help

  opts.on('-o', '--output EPUB_FILE', 'Specify output epub file path') do |o|
    options[:epub_path] = o
  end
  opts.on('-m', '--meta-file-only', 'Generate .opf, .ncx, mimetype, ...') do |o|
    options[:meta_file_only] = o
  end
  opts.on('-t', '--toc TOC_FILE EPUB_ROOT', 'Print YAML using TOC file') do |o|
    options[:toc_path] = o
  end
  opts.on('-v', '--verbose', 'Verbose output') do |o|
    options[:verbose] = o
  end
end
opts.parse!(ARGV)

# check options validity
option_count = 0
option_count += 1 if options[:meta_file_only] == true
option_count += 1 if options[:epub_path] != nil
option_count += 1 if options[:toc_path] != nil

if option_count > 1
  $stderr << "pubgen: `--meta-file-only', `--output' and `--toc' " << 
             "options cannot be combined\n\n" <<
             "Try `pubgen -h' for more informations\n"
  exit 1
end

if ARGV.size != 1
  if options[:toc_path] != nil
    $stderr << "pubgen: specify a epub root path\n\n" << 
               "Try `pubgen -h' for more informations\n"
  else
    $stderr << "pubgen: specify a yaml file\n\n" << 
               "Try `pubgen -h' for more informations\n"
  end
  exit 1
end
 
# `--toc' option. process it and exit
if options[:toc_path] != nil
  options[:epub_root] = ARGV[0]
  begin
    $stdout << Pubgen::YAML.generate(options[:epub_root], options[:toc_path])
  rescue Exception=>e
    pubgen_err(e.to_s)
    exit 1
  end
  exit 0
end

# now, options[:toc_path] == nil
options[:yaml_path] = ARGV[0]

begin
  yaml = YAML::load File.open(options[:yaml_path])
rescue Exception=>e
  pubgen_err("While loading yaml: " + e.to_s)
  exit 1
end

if yaml['metadata']['title'] == nil
  pubgen_err("Failed to find the value of 'title' attribute in: " + 
             options[:yaml_path])
  exit 1
end

# if `--output EPUB_PATH' is not given. get it from yaml
if !options[:meta_file_only] && !options[:epub_path]
  options[:epub_path] = yaml['metadata']['title'] + ".epub"
  options[:epub_path].gsub!(/[\/:?]/, "_") # file-system friendly
end
# options done

if yaml['metadata']['creator'] == nil
  yaml['metadata']['creator'] = "pubgen-#{Pubgen::VERSION}" 
end
if yaml['metadata']['contributor'] == nil
  yaml['metadata']['contributor'] = "pubgen-#{Pubgen::VERSION}"
end

$tmpdir = ""
$pwd_old = Dir.pwd
$exit_code = 0

begin
  if !options[:meta_file_only]
    # temporal working directory
    $tmpdir = ".pubgen-%08x" % Time.now.to_i 
    Dir.mkdir($tmpdir)
    pubgen_log("mkdir " + $tmpdir, options[:verbose])

    # copy all the files of manifest to $tmpdir
    yaml['manifest'].each do |file|
      if Pubgen::OPF.valid_manifest_element?(file) == false
        raise "Invalid manifest (not in sub-directory of yaml file): " + file
      end
      target_dir = "#{File.join($tmpdir, File.dirname(file))}"
      FileUtils.mkdir_p(target_dir)
      FileUtils.cp("#{File.join(File.dirname(options[:yaml_path]), file)}", 
                   target_dir, :verbose=>options[:verbose])
    end

    # change pwd
    Dir.chdir($tmpdir)
    pubgen_log("cd " + $tmpdir, options[:verbose])
  end

  # generate container.xml 
  # it's path is fixed (META-INF/container.xml)
  Dir.mkdir('META-INF') if !File::directory?('META-INF')
  container = File.new(File.join('META-INF', 'container.xml'), 'w')
  container.write(Pubgen::Container.generate)
  container.close
  pubgen_log("cat > #{File.join('META-INF', 'container.xml')}",
             options[:meta_file_only] || options[:verbose])

  # generate mimetype
  # it's path is also fixed (mimetype)
  mimetype = File.new('mimetype', 'w')
  mimetype.write('application/epub+zip')
  mimetype.close
  pubgen_log('cat > mimetype', options[:meta_file_only] || options[:verbose])

  # pubgen automatically generates cover page if cover-image is given without 
  # cover-page
  if yaml['guide']['cover-image'] != nil && yaml['guide']['cover-page'] == nil
    COVER_PAGE_PATH = 'cover-pubgen.xhtml'
    cover_page = File.new(COVER_PAGE_PATH, 'w')
    cover_page.write(Pubgen::CoverPage.generate(yaml['guide']['cover-image']))
    cover_page.close
    pubgen_log("cat > " + COVER_PAGE_PATH, 
               options[:meta_file_only] || options[:verbose])

    # add/set it to manifest, spine, and cover-page
    yaml['manifest'] << COVER_PAGE_PATH
    yaml['spine'].unshift(COVER_PAGE_PATH)
    yaml['guide']['cover-page'] = COVER_PAGE_PATH
  end

  # generate uuid
  uuid = "%08x-" % Time.now.to_i + 
            [4,4,4,12].map {|l| "%0#{l}x" % rand(1 << l*4) }.join('-')
  # uuid = UUID.new.generate

  # generate .opf file
  opf = File.new(Pubgen::Container.opf_path, 'w')
  opf.write(Pubgen::OPF.generate(yaml, uuid))
  opf.close
  pubgen_log("cat > " + Pubgen::Container.opf_path, 
             options[:meta_file_only] || options[:verbose])
  # pubgen automatically added .ncx file to opf's manifest

  # generate .ncx file
  ncx = File.new(Pubgen::OPF.ncx_path, 'w')
  ncx.write(Pubgen::NCX.generate(yaml['metadata']['title'], yaml['toc'], uuid))
  ncx.close
  pubgen_log("cat > " + Pubgen::OPF.ncx_path, 
             options[:meta_file_only] || options[:verbose])

  # make an epub
  if !options[:meta_file_only]
    Zip::Archive.open("pubgen.epub", Zip::CREATE | Zip::TRUNC) do |ar|
      Dir.glob('**/*').each do |path|
        if File.directory?(path)
          ar.add_dir(path)
        else
          ar.add_file(path, path)
        end
      end
    end
    pubgen_log("zip > pubgen.epub", options[:verbose])

    # mv pubgen.epub to options[:epub_path]
    Dir.chdir($pwd_old)
    pubgen_log("cd " + $pwd_old, options[:verbose])
    FileUtils.mv(File.join($tmpdir, 'pubgen.epub'), options[:epub_path])
    pubgen_log("mv #{File.join($tmpdir, 'pubgen.epub')} " + 
               "'#{options[:epub_path]}'", options[:verbose])
  end
rescue Exception=>e
  $exit_code = 1
  pubgen_err(e.to_s)
ensure
  # remove $tmpdir
  if Dir.pwd != $pwd_old
    Dir.chdir($pwd_old)
    pubgen_log("cd " + $pwd_old, options[:verbose])
  end
  if File::directory?($tmpdir)
    FileUtils.rm_rf($tmpdir)
    pubgen_log("rm -rf " + $tmpdir, options[:verbose])
  end
end

if $exit_code == 0 && !options[:meta_file_only]
  if options[:verbose]
    pubgen_log("# Successfully generated '#{options[:epub_path]}'")
  else
    pubgen_log("zip > '#{options[:epub_path]}'")
  end
end

exit $exit_code
